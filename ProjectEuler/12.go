//Problem 12- Highly divisible triangular number - https://projecteuler.net/problem=12
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
// 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//Let us list the factors of the first seven triangle numbers:
//1: 1
//3: 1,3
//6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//What is the value of the first triangle number to have over five hundred divisors?
package main

import "fmt"

func main() {
	fmt.Println(triangular(500))
}

func tauCeti(num int) int { // :)
	p, n := 1, num

	if num == 1 {
		return 1
	}

	for i := 2; i*i <= n; i++ {
		var c = 1
		for n%i == 0 {
			n /= i
			c++
		}
		p *= c
	}

	if n == num || n > 1 {
		p *= 2
	}
	return p
}

func triangular(x int) int {
	n, d := 1, 1
	for tauCeti(d) <= x {
		n++
		d += n
	}
	return d
}
